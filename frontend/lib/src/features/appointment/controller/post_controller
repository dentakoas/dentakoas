import 'package:get/get.dart';
import 'package:calendar_date_picker2/calendar_date_picker2.dart';
import 'package:denta_koas/src/utils/constants/colors.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:intl/intl.dart' as intl;

class PostController extends GetxController {
  static PostController get instance => Get.find<PostController>();

  final calendarController = CalendarController();
  final timeController = TimeController();
  final inputController = InputController();

  var koasName = ''.obs;
  var selectedDate = ''.obs;
  var selectedTime = ''.obs;

  @override
  void onInit() {
    super.onInit();
    Get.put(CalendarController());
    Get.put(TimeController());
    Get.put(InputController());
  }

  void updatePreviewAppointment(String name, String date, String time) {
    koasName.value = name;
    selectedDate.value = date;
    selectedTime.value = time;
  }
}

class CalendarController extends GetxController {
  static CalendarController get instance => Get.find<CalendarController>();

  var selectedIndex = 0.obs;
  var selectedDate = DateTime.now().obs;

  var selectedDateRange = <DateTime?>[].obs;

  final calendarRangeConfig = CalendarDatePicker2Config(
      calendarType: CalendarDatePicker2Type.range,
      firstDate: DateTime(2000),
      lastDate: DateTime(2101),
      selectedDayHighlightColor: TColors.primary,
      weekdayLabelTextStyle: const TextStyle(color: TColors.grey),
      controlsTextStyle: const TextStyle(color: TColors.primary),
    );

  void updateSelectedDay(int index) {
    selectedIndex.value = index;
  }

  void updateSelectedDate(DateTime date) {
    selectedDate.value = date;
  }
}

class TimeController extends GetxController {
  static TimeController get instance => Get.find<TimeController>();

  final selectedTimeStamp = (-1).obs;

  void updateSelectedTimeStamp(int index) {
    selectedTimeStamp.value = index;
  }
}
 
class InputController extends GetxController {
  static InputController get instance => Get.find<InputController>();
  // Reactive list of inputs
  var inputs = <Widget>[].obs;

  /// Initialize the inputs with a default count
  void initializeInputs(int count) {
    inputs.clear();
    for (int i = 0; i < count; i++) {
      inputs.add(_createInputRequirment(i + 1));
    }
  }

  /// Add a new input for requirement patient
  void addInputRequirment() {
    inputs.add(_createInputRequirment(inputs.length + 1));
  }
  
  /// Remove the input requirement at the specified index
  void removeInputRequirement(int index) {
    if (index >= 0 && index < inputs.length) {
      inputs.removeAt(index);
    }
  }
  /// Private method to create an input widget
  Widget _createInputRequirment(int index) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16.0),
      child: TextFormField(
        decoration: InputDecoration(
          prefixIcon: const Icon(Icons.settings),
          labelText: 'Patient Requirement $index',
        ),
      ),
    );
  }
}
